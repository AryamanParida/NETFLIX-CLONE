// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { fetchCount } from './counter/counterAPI';

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  user: null,
  // status: 'idle',
};

//////// WE DONT NEED createAsyncThunk THIS NOW
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // WE MADE CHANGES IN THIS FIRST REMOVED EVERYTHING AND THEN WE PUT THIS . THESE BELOW ARE CALLED ACTIONS(login,logout) . SO WE GO AND DISPATCH ACTION AND IT DOES A BEHAVIOUR. SO WAY WE INTERACT WITH GLOBAL STORE IS WE HAVE TO DISPATCH ACTIONS INTO IT AND TH2 2 ACTIONS LOGIN AND LOGOUT HAVE A WAY OF AFFECTING THE USERSECTION OF THE STORESO THATS WHY THEY ARE IN USERSLICE AND USEREDUCER

    // login takes a state takes action and does  the following 
    login:(state,action)=>{
      state.user=action.payload //takes a state modifies user and sets it to whatever we apss as a payload
    },

    logout:(state)=>{
      state.user=null;
    }
    },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  }

  //BELOW WERE ALREADY THER EBUT NOT NEEDED
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
);

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;
//WE PUT THE ACTIONS INSIDE THIS AND THIS WAY WE GET ACCESS TO THESE 2 ACTIONS OUTSIDE OF THE CLASS
export const {login,logout}=userSlice.actions;


//////// SELECTORS HELPS US TO ACESS  
// ==> NOW  WE ARE PUSHING INFO INTO USER STORE BUT HOW DOW E GET VALUE OUT OF IT AND THEN USE IT INSIDE  OF A COMPONENT
//SO IF I WANT TO GET A PIECEOF INFORMATION OUT OF THE USER STORE THEN ALL I NEED TO DO IS CREATE SOMETHING CALLED SELECTOR. SELECTOR WILL GO AHEAD AND GIVE ME BACK THE VALUE I AM AFTER 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;
//counter change to user bcoz name of slice is user and we chnged value to user inside initialState ==,> so change value to user
export const selectUser = (state) => state.user.user;



// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default userSlice.reducer;
